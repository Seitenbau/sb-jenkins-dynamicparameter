/*
 * Copyright 2012 Seitenbau
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.seitenbau.jenkins.plugins.dynamicparameter;

import hudson.Extension;
import hudson.model.ParameterValue;
import hudson.model.StringParameterValue;
import net.sf.json.JSONObject;

import org.apache.commons.lang.ObjectUtils;
import org.jvnet.localizer.ResourceBundleHolder;
import org.kohsuke.stapler.DataBoundConstructor;
import org.kohsuke.stapler.StaplerRequest;

/** Text parameter, with dynamically generated default value. */
public class StringParameterDefinition extends ParameterDefinitionBase
{
  /** Serial version UID. */
  private static final long serialVersionUID = 3162331168133114084L;

  /**
   * Constructor.
   * @param name parameter name
   * @param script script, which generates the parameter value
   * @param description parameter description
   * @param uuid identifier (optional)
   * @param remote execute the script on a remote node
   */
  @DataBoundConstructor
  public StringParameterDefinition(String name, String script, String description, String uuid,
      boolean remote)
  {
    super(name, script, description, uuid, remote);
  }

  /**
   * Execute the script and return the default value for this parameter.
   * @return the default value generated by the script or {@code null}
   */
  public final String getDefaultValue()
  {
    Object value = getValue();
    return ObjectUtils.toString(value, null);
  }

  @Override
  public final ParameterValue createValue(StaplerRequest req, JSONObject jo)
  {
    StringParameterValue parameterValue = req.bindJSON(StringParameterValue.class, jo);
    parameterValue.setDescription(getDescription());
    return parameterValue;
  }

  @Override
  public final ParameterValue createValue(StaplerRequest req)
  {
    String[] values = req.getParameterValues(getName());

    if (values == null)
    {
      return getDefaultParameterValue();
    }
    else if (values.length == 1)
    {
      return new StringParameterValue(getName(), values[0], getDescription());
    }
    else
    {
      String msg = String.format("Illegal number of parameter values for '%s': %d", getName(),
          values.length);
      throw new IllegalArgumentException(msg);
    }
  }

  /** Parameter descriptor. */
  @Extension
  public static final class DescriptorImpl extends ParameterDescriptor
  {
    private static final String DISPLAY_NAME = "DisplayName";

    @Override
    public final String getDisplayName()
    {
      return ResourceBundleHolder.get(StringParameterDefinition.class).format(DISPLAY_NAME);
    }
  }
}
